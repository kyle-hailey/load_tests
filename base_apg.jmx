<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/kylelf/rds/jmeter/postgres/postgresql-9.4-jdbc4.jar</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">pdbpool</stringProp>
        <stringProp name="poolMax">20</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://:5432/postgres</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <stringProp name="username"></stringProp>
        <stringProp name="password"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="postgres" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478546001000</longProp>
        <longProp name="ThreadGroup.end_time">1478546001000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update" enabled="false">
            <stringProp name="dataSource">pdbpool</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">update authors set email = &apos;toto&apos; where id &gt; ( select max(id) - 1 from authors)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fooct" elementType="Argument">
                  <stringProp name="Argument.name">fooct</stringProp>
                  <stringProp name="Argument.value">10000000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert" enabled="true">
            <stringProp name="dataSource">pdbpool</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">INSERT INTO authors (id,name,email) VALUES
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;),
( nextval(&apos;serial&apos;)  ,&apos;Priya&apos;,&apos;p@gmail.com&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">10000000</stringProp>
              <stringProp name="CounterConfig.incr">2</stringProp>
              <stringProp name="CounterConfig.name">author_id</stringProp>
              <stringProp name="CounterConfig.format">0</stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">2</stringProp>
              <stringProp name="CounterConfig.end">10000000</stringProp>
              <stringProp name="CounterConfig.incr">2</stringProp>
              <stringProp name="CounterConfig.name">author_id2</stringProp>
              <stringProp name="CounterConfig.format">0</stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="select" enabled="true">
            <stringProp name="dataSource">pdbpool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 2500  from authors) union 
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) union
select count(*) from authors where id &lt; ( select max(id) - 30  from authors) and id &gt; ( select max(id) - 1500  from authors) ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete" enabled="true">
            <stringProp name="dataSource">pdbpool</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">delete from authors where id &lt; ( select  * from (select max(id) - 30 from authors) a ) and id &gt; ( select *  from (select max(id) - 500 from authors) b ) ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update_cte" enabled="true">
            <stringProp name="dataSource">pdbpool</stringProp>
            <stringProp name="queryType">Callable Statement</stringProp>
            <stringProp name="query">WITH cte AS (
   SELECT id     
   FROM   authors 
   LIMIT  1     
   )
UPDATE authors s
SET    email = &apos;toto&apos; 
FROM   cte
WHERE  s.id = cte.id

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fooct" elementType="Argument">
                  <stringProp name="Argument.name">fooct</stringProp>
                  <stringProp name="Argument.value">10000000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
